[2025-06-14 09:25:31 UTC] Starting parse
[2025-06-14 09:25:31 UTC] Fetching file list from https://api.github.com/repos/teckglobal/teckglobal-bfp-waf-rules/contents/rules
[2025-06-14 09:25:31 UTC] Fetching https://raw.githubusercontent.com/teckglobal/teckglobal-bfp-waf-rules/main/rules/REQUEST-905-COMMON-EXCEPTIONS.conf
[2025-06-14 09:25:31 UTC] Parsing REQUEST-905-COMMON-EXCEPTIONS.conf, content length: 1652
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-905-COMMON-EXCEPTIONS.conf: # ------------------------------------------------------------------------
# OWASP CRS ver.4.16.0-dev
# Copyright (c) 2006-2020 Trustwave and contributors. All rights reserved.
# Copyright (c) 2021-20
[2025-06-14 09:25:31 UTC] Parsing directive: id:905100,phase:1,pass,t:none,nolog,tag:'application-multi',tag:'language-multi',tag:'platform-apache',tag:'attack-generic',tag:'OWASP_CRS',ver:'OWASP_CRS/4.16.0-dev',chain"
    SecRule REMOTE_ADDR "@ipMatch 127.0.0.1,::1" "t:none,ctl:ruleRemoveByTag=OWASP_CRS,ctl:auditEngine=Off"

#
# Exception for Apache internal dummy connection
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 905100 in REQUEST-905-COMMON-EXCEPTIONS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:905110,phase:1,pass,t:none,nolog,tag:'application-multi',tag:'language-multi',tag:'platform-apache',tag:'attack-generic',tag:'OWASP_CRS',ver:'OWASP_CRS/4.16.0-dev',chain"
    SecRule REQUEST_HEADERS:User-Agent "@endsWith (internal dummy connection)" "t:none,chain"
        SecRule REQUEST_LINE "@rx ^(?:GET /|OPTIONS \*) HTTP/[12]\.[01]$" "t:none,ctl:ruleRemoveByTag=OWASP_CRS,ctl:auditEngine=Off"
[2025-06-14 09:25:31 UTC] Parsed SecRule 905110 in REQUEST-905-COMMON-EXCEPTIONS.conf
[2025-06-14 09:25:31 UTC] Processing 2 rules for REQUEST-905-COMMON-EXCEPTIONS.conf
[2025-06-14 09:25:31 UTC] Inserting rule 905100
[2025-06-14 09:25:31 UTC] Inserting rule 905110
[2025-06-14 09:25:31 UTC] Inserted rule 905100
[2025-06-14 09:25:31 UTC] Inserted rule 905110
[2025-06-14 09:25:31 UTC] Fetching https://raw.githubusercontent.com/teckglobal/teckglobal-bfp-waf-rules/main/rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing REQUEST-941-APPLICATION-ATTACK-XSS.conf, content length: 51796
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-941-APPLICATION-ATTACK-XSS.conf: # ------------------------------------------------------------------------
# OWASP CRS ver.4.16.0-dev
# Copyright (c) 2006-2020 Trustwave and contributors. All rights reserved.
# Copyright (c) 2021-20
[2025-06-14 09:25:31 UTC] Parsing directive: id:941011,phase:1,pass,nolog,tag:'OWASP_CRS',ver:'OWASP_CRS/4.16.0-dev',skipAfter:END-REQUEST-941-APPLICATION-ATTACK-XSS"
[2025-06-14 09:25:31 UTC] Parsed SecRule 941011 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941012,phase:2,pass,nolog,tag:'OWASP_CRS',ver:'OWASP_CRS/4.16.0-dev',skipAfter:END-REQUEST-941-APPLICATION-ATTACK-XSS"
#
# -= Paranoia Level 1 (default) =- (apply only when tx.detection_paranoia_level is sufficiently high: 1 or higher)
#


# In CRS v4.0
[2025-06-14 09:25:31 UTC] Parsing directive: we have added REQUEST_FILENAME to the list of variables to
# be checked for XSS to catch path-based XSS exploits such as:
# /index.php/%3Csvg/onload=alert()
#
# However
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: we have added REQUEST_FILENAME to the list of variables to
# be checked for XSS to catch path-based XSS exploits such as:
# /index.php/%3Csvg/onload=alert()
#
# However
[2025-06-14 09:25:31 UTC] Parsing directive: the REQUEST_FILENAME is always populated (while ARGS etc. are
# only set on some requests) and we found that always checking the
# REQUEST_FILENAME has a significant performance impact.
# Therefore
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: the REQUEST_FILENAME is always populated (while ARGS etc. are
# only set on some requests) and we found that always checking the
# REQUEST_FILENAME has a significant performance impact.
# Therefore
[2025-06-14 09:25:31 UTC] Parsing directive: we are disabling the REQUEST_FILENAME XSS checks when the
# REQUEST_FILENAME is clearly not containing special characters necessary
# for a successful XSS.
#
# Some bona-fide REQUEST_FILENAMEs will still contain special characters
# and will be checked by the rules
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: we are disabling the REQUEST_FILENAME XSS checks when the
# REQUEST_FILENAME is clearly not containing special characters necessary
# for a successful XSS.
#
# Some bona-fide REQUEST_FILENAMEs will still contain special characters
# and will be checked by the rules
[2025-06-14 09:25:31 UTC] Parsing directive: but it will be a much lower amount
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: but it will be a much lower amount
[2025-06-14 09:25:31 UTC] Parsing directive: # and that is a trade-off we are willing to make.
#
# So
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: # and that is a trade-off we are willing to make.
#
# So
[2025-06-14 09:25:31 UTC] Parsing directive: we check for XSS in REQUEST_FILENAME only if it contains
# other characters than alphanumeric characters
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: we check for XSS in REQUEST_FILENAME only if it contains
# other characters than alphanumeric characters
[2025-06-14 09:25:31 UTC] Parsing directive: hyphens
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: hyphens
[2025-06-14 09:25:31 UTC] Parsing directive: underscores etc.
# typically found in filenames and paths:
#
# - ascii 20 (whitespace)
# - ascii 45-47 (- . /)
# - ascii 48-57 (0-9)
# - ascii 65-90 (A-Z)
# - ascii 95 (underscore)
# - ascii 97-122 (a-z)
#
# If just these characters are present
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: underscores etc.
# typically found in filenames and paths:
#
# - ascii 20 (whitespace)
# - ascii 45-47 (- . /)
# - ascii 48-57 (0-9)
# - ascii 65-90 (A-Z)
# - ascii 95 (underscore)
# - ascii 97-122 (a-z)
#
# If just these characters are present
[2025-06-14 09:25:31 UTC] Parsing directive: we make use of a special tag to remove
# REQUEST_FILENAME from the target list of all the 941xxx rules starting 941100.
#
# Please note that it would be preferable to start without REQUEST_FILENAME in the
# target list and to add it on a case to case base
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: we make use of a special tag to remove
# REQUEST_FILENAME from the target list of all the 941xxx rules starting 941100.
#
# Please note that it would be preferable to start without REQUEST_FILENAME in the
# target list and to add it on a case to case base
[2025-06-14 09:25:31 UTC] Parsing directive: but the rule language does not
# support this feature at runtime.
#
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: but the rule language does not
# support this feature at runtime.
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 941012 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941010,phase:1,pass,t:none,nolog,tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',ctl:ruleRemoveTargetByTag=xss-perf-disable;REQUEST_FILENAME,ver:'OWASP_CRS/4.16.0-dev'"


#
# -=[ Libinjection - XSS Detection ]=-
#
# Ref: https://github.com/client9/libinjection
# Ref: https://speakerdeck.com/ngalbreath/libinjection-from-sqli-to-xss
#
# -=[ Targets ]=-
#
# 941100: PL1 : REQUEST_COOKIES|
#               REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|
#               ARGS_NAMES|ARGS|XML:/*
#
# 941101: PL2 : REQUEST_FILENAME|REQUEST_HEADERS:Referer
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 941010 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941100,phase:2,block,t:none,t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls,msg:'XSS Attack Detected via libinjection',logdata:'Matched Data: XSS data found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"


#
# -=[ XSS Filters - Category 1 ]=-
# http://xssplayground.net23.net/xssfilter.html
# script tag based XSS vectors
[2025-06-14 09:25:31 UTC] Parsing directive: e.g.
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: e.g.
[2025-06-14 09:25:31 UTC] Parsing directive: <script> alert(1)</script>
#
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: <script> alert(1)</script>
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 941100 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941110,phase:2,block,capture,t:none,t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls,msg:'XSS Filter - Category 1: Script Tag Vector',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"


#
# -=[ XSS Filters - Category 3 ]=-
#
# Regular expression generated from regex-assembly/941130.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 941130
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 941110 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941130,phase:2,block,capture,t:none,t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls,msg:'XSS Filter - Category 3: Attribute Vector',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"


#
# -=[ XSS Filters - Category 4 ]=-
# XSS vectors making use of javascript uri and tags
[2025-06-14 09:25:31 UTC] Parsing directive: e.g.
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: e.g.
[2025-06-14 09:25:31 UTC] Parsing directive: <p style="background:url(javascript:alert(1))">
# https://portswigger.net/web-security/cross-site-scripting/cheat-sheet#css-expressions-ie7
# https://portswigger.net/web-security/cross-site-scripting/cheat-sheet#behaviors-for-older-modes-of-ie
# examples: https://regex101.com/r/FFEpsh/1
#
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: <p style="background:url(javascript:alert(1))">
# https://portswigger.net/web-security/cross-site-scripting/cheat-sheet#css-expressions-ie7
# https://portswigger.net/web-security/cross-site-scripting/cheat-sheet#behaviors-for-older-modes-of-ie
# examples: https://regex101.com/r/FFEpsh/1
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 941130 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941140,phase:2,block,capture,t:none,t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls,t:removeWhitespace,msg:'XSS Filter - Category 4: Javascript URI Vector',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"


#
# -=[ NoScript XSS Filters ]=-
# Ref: http://noscript.net/
#
# [NoScript InjectionChecker] HTML injection
#
# Regular expression generated from regex-assembly/941160.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 941160
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 941140 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-941-APPLICATION-ATTACK-XSS.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* "@rx (?i)<[^0-9<>A-Z_a-z]*(?:[^\s\x0b\"'<>]*:)?[^0-9<>A-Z_a-z]*
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-941-APPLICATION-ATTACK-XSS.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* "@rx (?i)(?:\W|^)(?:javascript:(?:[\s\S]+[=\x5c\(\[\.<]|[\s\S]*
[2025-06-14 09:25:31 UTC] Parsing directive: id:941180,phase:2,block,capture,t:none,t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls,msg:'Node-Validator Deny List Keywords',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"


#
# -=[ XSS Filters from IE ]=-
# Ref: http://blogs.technet.com/srd/archive/2008/08/18/ie-8-xss-filter-architecture-implementation.aspx
# Ref: http://xss.cx/examples/ie/internet-exploror-ie9-xss-filter-rules-example-regexp-mshtmldll.txt
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 941180 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941190,phase:2,block,capture,t:none,t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls,msg:'IE XSS Filters - Attack Detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
[2025-06-14 09:25:31 UTC] Parsed SecRule 941190 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941200,phase:2,block,capture,t:none,t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls,msg:'IE XSS Filters - Attack Detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"


# This rule tries to match all the possible ways to write 'javascript' using
# html entities
[2025-06-14 09:25:31 UTC] Parsing directive: and javascript escape sequences.
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: and javascript escape sequences.
[2025-06-14 09:25:31 UTC] Parsed SecRule 941200 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941210,phase:2,block,capture,t:none,t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls,msg:'Javascript Word Detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
[2025-06-14 09:25:31 UTC] Parsed SecRule 941210 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941220,phase:2,block,capture,t:none,t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls,msg:'IE XSS Filters - Attack Detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
[2025-06-14 09:25:31 UTC] Parsed SecRule 941220 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941230,phase:2,block,capture,t:none,t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls,msg:'IE XSS Filters - Attack Detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
[2025-06-14 09:25:31 UTC] Parsed SecRule 941230 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941240,phase:2,block,capture,t:none,t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:lowercase,t:removeNulls,msg:'IE XSS Filters - Attack Detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
[2025-06-14 09:25:31 UTC] Parsed SecRule 941240 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-941-APPLICATION-ATTACK-XSS.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* "@rx (?i:<META[\s/+].*?http-equiv[\s/+]*=[\s/+]*[\"'`]?(?:(?:c|&#x?0*(?:67|43|99|63);?)|(?:r|&#x?0*(?:82|52|114|72
[2025-06-14 09:25:31 UTC] Parsing directive: id:941260,phase:2,block,capture,t:none,t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls,msg:'IE XSS Filters - Attack Detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
[2025-06-14 09:25:31 UTC] Parsed SecRule 941260 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941270,phase:2,block,capture,t:none,t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls,msg:'IE XSS Filters - Attack Detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
[2025-06-14 09:25:31 UTC] Parsed SecRule 941270 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941280,phase:2,block,capture,t:none,t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls,msg:'IE XSS Filters - Attack Detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
[2025-06-14 09:25:31 UTC] Parsed SecRule 941280 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941290,phase:2,block,capture,t:none,t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls,msg:'IE XSS Filters - Attack Detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
[2025-06-14 09:25:31 UTC] Parsed SecRule 941290 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941300,phase:2,block,capture,t:none,t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls,msg:'IE XSS Filters - Attack Detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

#
# https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html
# US-ASCII encoding bypass listed on XSS filter evasion
# Reported by Mazin Ahmed
#
# This evasion covered by this chain of rules is specific to webservers that deliver content in US-ASCII.
# Only Apache Tomcat is known (according to the page linked above) to be vulnerable to this and probably has to be
# misconfigured for this to happen.
#
# Since US-ASCII is a seven bit encoding
[2025-06-14 09:25:31 UTC] Parsing directive: bit 8 is ignored. Consider the following ISO 8859-1 sequence:
#
# ¼script¾alert(¢XSS¢)¼/script¾
#
# A filter looking for tags will usually not match against this sequence because there are no angle brackets (< / >). However
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: bit 8 is ignored. Consider the following ISO 8859-1 sequence:
#
# ¼script¾alert(¢XSS¢)¼/script¾
#
# A filter looking for tags will usually not match against this sequence because there are no angle brackets (< / >). However
[2025-06-14 09:25:31 UTC] Parsing directive: # the characters where the brackets would be are ISO 8859-1 characters:
# - ¼: 0x00BC
# - ¾: 0x00BE
# - ¢: 0x00A2
#
# And this is how the sequence looks in in US-ASCII:
#
# <script>alert("XSSB")</script/>
#
# This enables an attacker to craft a string that will be delivered in a form that a browser will execute as script
# while being ignored by input filters.
#
# This rule looks for a start tag sequence that looks like "<...>" (checks for hex and plain to be sure).
# Because the bytes matched occur in many different languages encoded as multibyte characters (e.g. UTF-8)
# (e.g. German umlauts
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: # the characters where the brackets would be are ISO 8859-1 characters:
# - ¼: 0x00BC
# - ¾: 0x00BE
# - ¢: 0x00A2
#
# And this is how the sequence looks in in US-ASCII:
#
# <script>alert("XSSB")</script/>
#
# This enables an attacker to craft a string that will be delivered in a form that a browser will execute as script
# while being ignored by input filters.
#
# This rule looks for a start tag sequence that looks like "<...>" (checks for hex and plain to be sure).
# Because the bytes matched occur in many different languages encoded as multibyte characters (e.g. UTF-8)
# (e.g. German umlauts
[2025-06-14 09:25:31 UTC] Parsing directive: Russian characters) this isn't very helpful and can cause many false positives. We
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: Russian characters) this isn't very helpful and can cause many false positives. We
[2025-06-14 09:25:31 UTC] Parsing directive: therefore
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: therefore
[2025-06-14 09:25:31 UTC] Parsing directive: # use a chained rule to also look for an end tag sequence that looks like "</...>". Only if the chained rule matches will
# the request be blocked.
#
# This is of course still not perfect but should at least make it harder to hide most tags using this technique while
# requiring very specific patterns in a language to match
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: # use a chained rule to also look for an end tag sequence that looks like "</...>". Only if the chained rule matches will
# the request be blocked.
#
# This is of course still not perfect but should at least make it harder to hide most tags using this technique while
# requiring very specific patterns in a language to match
[2025-06-14 09:25:31 UTC] Parsing directive: which should get rid of most false positives.
# These rules would
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: which should get rid of most false positives.
# These rules would
[2025-06-14 09:25:31 UTC] Parsing directive: for example
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: for example
[2025-06-14 09:25:31 UTC] Parsing directive: not guard against an element without an end tag
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: not guard against an element without an end tag
[2025-06-14 09:25:31 UTC] Parsing directive: e.g. "<img... />".
#
# US-ASCII on Wikipedia: https://en.wikipedia.org/wiki/ASCII
# ISO 8859-1 on Wikipedia: https://en.wikipedia.org/wiki/ISO/IEC_8859-1
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: e.g. "<img... />".
#
# US-ASCII on Wikipedia: https://en.wikipedia.org/wiki/ASCII
# ISO 8859-1 on Wikipedia: https://en.wikipedia.org/wiki/ISO/IEC_8859-1
[2025-06-14 09:25:31 UTC] Parsed SecRule 941300 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941310,phase:2,block,capture,t:none,t:lowercase,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,msg:'US-ASCII Malformed Encoding XSS Filter - Attack Detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-tomcat',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',chain"
    SecRule MATCHED_VARS "@rx (?:\xbc\s*/\s*[^\xbe>]*[\xbe>])|(?:<\s*/\s*[^\xbe]*\xbe)" "setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

#
# https://nedbatchelder.com/blog/200704/xss_with_utf7.html
# UTF-7 encoding XSS filter evasion for IE.
# Reported by Vladimir Ivanov
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 941310 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941350,phase:2,block,capture,t:none,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,msg:'UTF-7 Encoding IE XSS - Attack Detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-internet-explorer',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

#
# Defend against JSFuck and Hieroglyphy obfuscation of Javascript code
#
# https://en.wikipedia.org/wiki/JSFuck
# https://github.com/alcuadrado/hieroglyphy
#
# These JS obfuscations mostly aim for client side XSS exploits
[2025-06-14 09:25:31 UTC] Parsing directive: hence the
# integration of this rule into the XSS rule group. But serverside JS could
# also be attacked via these techniques.
#
# Detection pattern / Core elements of JSFuck and Hieroglyphy are the
# following two items:
# !![]
# !+[]
#
# ModSecurity always transforms "+" into " " with query strings and the
# URLENCODE body processor (but not for JSON). So we need to check for
# the following patterns:
# !![]
# !+[]
# ! []
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: hence the
# integration of this rule into the XSS rule group. But serverside JS could
# also be attacked via these techniques.
#
# Detection pattern / Core elements of JSFuck and Hieroglyphy are the
# following two items:
# !![]
# !+[]
#
# ModSecurity always transforms "+" into " " with query strings and the
# URLENCODE body processor (but not for JSON). So we need to check for
# the following patterns:
# !![]
# !+[]
# ! []
[2025-06-14 09:25:31 UTC] Parsed SecRule 941350 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941360,phase:2,block,capture,t:none,msg:'JSFuck / Hieroglyphy obfuscation detected',logdata:'Matched Data: Suspicious payload found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242/63',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

#
# Prevent 941180 bypass by using JavaScript global variables
# Refer to: https://www.secjuice.com/bypass-xss-filters-using-javascript-global-variables/
#
# Examples:
#    - /?search=/?a=";+alert(self["document"]["cookie"]);//
#    - /?search=/?a=";+document+/*foo*/+.+/*bar*/+cookie;//
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 941360 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941370,phase:2,block,capture,t:none,t:urlDecodeUni,t:compressWhitespace,msg:'JavaScript global variable found',logdata:'Matched Data: Suspicious JS global variable found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242/63',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

#
# JavaScript methods which take code as a string types are considered unsafe.
# Unsafe JS functions like eval()
[2025-06-14 09:25:31 UTC] Parsing directive: setInterval()
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: setInterval()
[2025-06-14 09:25:31 UTC] Parsing directive: setTimeout()
# Unsafe JS constructor new Function()
# https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#dangerous-contexts
# https://snyk.io/blog/5-ways-to-prevent-code-injection-in-javascript-and-node-js/
#
# Regular expression generated from regex-assembly/941390.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 941390
#
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: setTimeout()
# Unsafe JS constructor new Function()
# https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#dangerous-contexts
# https://snyk.io/blog/5-ways-to-prevent-code-injection-in-javascript-and-node-js/
#
# Regular expression generated from regex-assembly/941390.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 941390
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 941370 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941390,phase:2,block,capture,t:none,t:htmlEntityDecode,t:jsDecode,msg:'Javascript method detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"


#
# JavaScript function without parentheses
# Reference: https://portswigger.net/research/the-seventh-way-to-call-a-javascript-function-without-parentheses
#
# Example Payloads:
# [].sort.call`${alert}1337`
# [].map.call`${eval}\\u{61}lert\x281337\x29`
# Reflect.apply.call`${navigation.navigate}${navigation}${[name]}`
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 941390 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941400,phase:2,block,capture,t:none,t:urlDecodeUni,t:compressWhitespace,msg:'XSS JavaScript function without parentheses',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
[2025-06-14 09:25:31 UTC] Parsed SecRule 941400 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941013,phase:1,pass,nolog,tag:'OWASP_CRS',ver:'OWASP_CRS/4.16.0-dev',skipAfter:END-REQUEST-941-APPLICATION-ATTACK-XSS"
[2025-06-14 09:25:31 UTC] Parsed SecRule 941013 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941014,phase:2,pass,nolog,tag:'OWASP_CRS',ver:'OWASP_CRS/4.16.0-dev',skipAfter:END-REQUEST-941-APPLICATION-ATTACK-XSS"
#
# -= Paranoia Level 2 =- (apply only when tx.detection_paranoia_level is sufficiently high: 2 or higher)
#

#
# This is a stricter sibling of rule 941100.
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 941014 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941101,phase:1,block,capture,t:none,t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls,msg:'XSS Attack Detected via libinjection',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/2',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"


#
# -=[ XSS Filters - Category 2 ]=-
# XSS vectors making use of event handlers like onerror
[2025-06-14 09:25:31 UTC] Parsing directive: onload etc
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: onload etc
[2025-06-14 09:25:31 UTC] Parsing directive: e.g.
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: e.g.
[2025-06-14 09:25:31 UTC] Parsing directive: <body onload="alert(1)">
#
# We are not listing all the known event handlers like rule 941160
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: <body onload="alert(1)">
#
# We are not listing all the known event handlers like rule 941160
[2025-06-14 09:25:31 UTC] Parsing directive: but we
# limit the alerts to keywords of 3-50 characters after the prefix ("on").
#
# The shortest known event is "onget". The longest known event is "onwebkitplaybacktargetavailabilitychanged"
# with 39 chars after the prefix. 50 chars adds a little bit of safety.
#
# This rule has been moved to PL2 since it has a tendency to trigger on random input.
#
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: but we
# limit the alerts to keywords of 3-50 characters after the prefix ("on").
#
# The shortest known event is "onget". The longest known event is "onwebkitplaybacktargetavailabilitychanged"
# with 39 chars after the prefix. 50 chars adds a little bit of safety.
#
# This rule has been moved to PL2 since it has a tendency to trigger on random input.
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 941101 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-941-APPLICATION-ATTACK-XSS.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* "@rx (?i)[\s\"'`;/0-9=\x0B\x09\x0C\x3B\x2C\x28\x3B]on[a-zA-Z]{3
[2025-06-14 09:25:31 UTC] Parsing directive: id:941150,phase:2,block,capture,t:none,t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls,msg:'XSS Filter - Category 5: Disallowed HTML Attributes',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/2',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"



#
# [Deny List Keywords from Node-Validator]
# https://github.com/validatorjs/validator.js/
# This rule is a stricter sibling of 941180 (PL1)
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 941150 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941181
[2025-06-14 09:25:31 UTC] Parsing directive: phase:2
[2025-06-14 09:25:31 UTC] Parsing directive: block
[2025-06-14 09:25:31 UTC] Parsing directive: capture
[2025-06-14 09:25:31 UTC] Parsing directive: t:none
[2025-06-14 09:25:31 UTC] Parsing directive: t:utf8toUnicode
[2025-06-14 09:25:31 UTC] Parsing directive: t:urlDecodeUni
[2025-06-14 09:25:31 UTC] Parsing directive: t:htmlEntityDecode
[2025-06-14 09:25:31 UTC] Parsing directive: t:jsDecode
[2025-06-14 09:25:31 UTC] Parsing directive: t:cssDecode
[2025-06-14 09:25:31 UTC] Parsing directive: t:lowercase
[2025-06-14 09:25:31 UTC] Parsing directive: t:removeNulls
[2025-06-14 09:25:31 UTC] Parsing directive: msg:'Node-Validator Deny List Keywords'
[2025-06-14 09:25:31 UTC] Parsing directive: logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}'
[2025-06-14 09:25:31 UTC] Parsing directive: tag:'application-multi'
[2025-06-14 09:25:31 UTC] Parsing directive: tag:'language-multi'
[2025-06-14 09:25:31 UTC] Parsing directive: tag:'platform-multi'
[2025-06-14 09:25:31 UTC] Parsing directive: tag:'attack-xss'
[2025-06-14 09:25:31 UTC] Parsing directive: tag:'xss-perf-disable'
[2025-06-14 09:25:31 UTC] Parsing directive: tag:'paranoia-level/2'
[2025-06-14 09:25:31 UTC] Parsing directive: tag:'OWASP_CRS'
[2025-06-14 09:25:31 UTC] Parsing directive: tag:'OWASP_CRS/ATTACK-XSS'
[2025-06-14 09:25:31 UTC] Parsing directive: tag:'capec/1000/152/242'
[2025-06-14 09:25:31 UTC] Parsing directive: ver:'OWASP_CRS/4.16.0-dev'
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: ver:'OWASP_CRS/4.16.0-dev'
[2025-06-14 09:25:31 UTC] Parsing directive: severity:'CRITICAL'
[2025-06-14 09:25:31 UTC] Parsing directive: setvar:'tx.xss_score=+%{tx.critical_anomaly_score}'
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: setvar:'tx.xss_score=+%{tx.critical_anomaly_score}'
[2025-06-14 09:25:31 UTC] Parsing directive: setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"



#
# -=[ XSS Filters from IE ]=-

# Detect tags that are the most common direct HTML injection points.
#
#     <a href=javascript:...
#     <applet src="..." type=text/html>
#     <applet src="data:text/html;base64
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"



#
# -=[ XSS Filters from IE ]=-

# Detect tags that are the most common direct HTML injection points.
#
#     <a href=javascript:...
#     <applet src="..." type=text/html>
#     <applet src="data:text/html;base64
[2025-06-14 09:25:31 UTC] Parsing directive: PHNjcmlwdD5hbGVydCgvWFNTLyk8L3NjcmlwdD4" type=text/html>
#     <base href=javascript:...
#     <base href=... // change base URL to something else to exploit relative filename inclusion
#     <bgsound src=javascript:...
#     <body background=javascript:...
#     <body onload=...
#     <embed src=http://www.example.com/flash.swf allowScriptAccess=always
#     <embed src="data:image/svg+xml;
#     <frameset><frame src="javascript:..."></frameset>
#     <iframe src=javascript:...
#     <img src=x onerror=...
#     <input type=image src=javascript:...
#     <layer src=...
#     <link href="javascript:..." rel="stylesheet" type="text/css"
#     <link href="http://www.example.com/xss.css" rel="stylesheet" type="text/css"
#     <meta http-equiv="refresh" content="0;url=javascript:..."
#     <meta http-equiv="refresh" content="0;url=http://;javascript:..." // evasion
#     <meta http-equiv="link" rel=stylesheet content="http://www.example.com/xss.css">
#     <meta http-equiv="Set-Cookie" content="NEW_COOKIE_VALUE">
#     <object data=http://www.example.com
#     <object type=text/x-scriptlet data=...
#     <object type=application/x-shockwave-flash data=xss.swf>
#     <object classid=clsid:ae24fdae-03c6-11d1-8b76-0080c744f389><param name=url value=javascript:...></object> // not verified
#     <script>...</script>
#     <script src=http://www.example.com/xss.js></script> - TODO add another rule for this
#     <script src="data:text/javascript,alert(1)"></script>
#     <script src="data:text/javascript;base64,PHNjcmlwdD5hbGVydChkb2N1bWVudC5jb29raWUpOzwvc2NyaXB0Pg=="></script>
#     <style>STYLE</style>
#     <style type=text/css>STYLE</style>
#     <style type=text/javascript>alert('xss')</style>
#     <table background=javascript:...
#     <td background=javascript:
#
#
# NOTES
#
#  - Reference the WASC Script Mapping Project - http://projects.webappsec.org/Script-Mapping
#
#  - Not using closing brackets because they are not needed for the
#    attacks to succeed. The following seems to work in FF: <body/s/onload=...
#
#  - Also
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: PHNjcmlwdD5hbGVydCgvWFNTLyk8L3NjcmlwdD4" type=text/html>
#     <base href=javascript:...
#     <base href=... // change base URL to something else to exploit relative filename inclusion
#     <bgsound src=javascript:...
#     <body background=javascript:...
#     <body onload=...
#     <embed src=http://www.example.com/flash.swf allowScriptAccess=always
#     <embed src="data:image/svg+xml;
#     <frameset><frame src="javascript:..."></frameset>
#     <iframe src=javascript:...
#     <img src=x onerror=...
#     <input type=image src=javascript:...
#     <layer src=...
#     <link href="javascript:..." rel="stylesheet" type="text/css"
#     <link href="http://www.example.com/xss.css" rel="stylesheet" type="text/css"
#     <meta http-equiv="refresh" content="0;url=javascript:..."
#     <meta http-equiv="refresh" content="0;url=http://;javascript:..." // evasion
#     <meta http-equiv="link" rel=stylesheet content="http://www.example.com/xss.css">
#     <meta http-equiv="Set-Cookie" content="NEW_COOKIE_VALUE">
#     <object data=http://www.example.com
#     <object type=text/x-scriptlet data=...
#     <object type=application/x-shockwave-flash data=xss.swf>
#     <object classid=clsid:ae24fdae-03c6-11d1-8b76-0080c744f389><param name=url value=javascript:...></object> // not verified
#     <script>...</script>
#     <script src=http://www.example.com/xss.js></script> - TODO add another rule for this
#     <script src="data:text/javascript,alert(1)"></script>
#     <script src="data:text/javascript;base64,PHNjcmlwdD5hbGVydChkb2N1bWVudC5jb29raWUpOzwvc2NyaXB0Pg=="></script>
#     <style>STYLE</style>
#     <style type=text/css>STYLE</style>
#     <style type=text/javascript>alert('xss')</style>
#     <table background=javascript:...
#     <td background=javascript:
#
#
# NOTES
#
#  - Reference the WASC Script Mapping Project - http://projects.webappsec.org/Script-Mapping
#
#  - Not using closing brackets because they are not needed for the
#    attacks to succeed. The following seems to work in FF: <body/s/onload=...
#
#  - Also
[2025-06-14 09:25:31 UTC] Parsing directive: browsers sometimes tend to translate < into >
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: browsers sometimes tend to translate < into >
[2025-06-14 09:25:31 UTC] Parsing directive: in order to "repair"
#    what they think was a mistake made by the programmer/template designer.
#
#  - Browsers are flexible when it comes to what they accept as separator between
#    tag names and attributes. The following is commonly used in payloads: <img/src=...
#    A better example: <BODY onload!#$%&amp;()*~+-_.
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: in order to "repair"
#    what they think was a mistake made by the programmer/template designer.
#
#  - Browsers are flexible when it comes to what they accept as separator between
#    tag names and attributes. The following is commonly used in payloads: <img/src=...
#    A better example: <BODY onload!#$%&amp;()*~+-_.
[2025-06-14 09:25:31 UTC] Parsing directive: :;?@[/|\]^=alert("XSS")>
#
#  - Grave accents are sometimes used as an evasion technique (as a replacement for quotes)
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: :;?@[/|\]^=alert("XSS")>
#
#  - Grave accents are sometimes used as an evasion technique (as a replacement for quotes)
[2025-06-14 09:25:31 UTC] Parsing directive: #    but I don't believe we need to look for quotes anywhere.
#
#  - Links do not have to be fully qualified. For example
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: #    but I don't believe we need to look for quotes anywhere.
#
#  - Links do not have to be fully qualified. For example
[2025-06-14 09:25:31 UTC] Parsing directive: the following works:
#    <script src="//ha.ckers.org/.j">
#
# This rule is also triggered by the following exploit(s):
# [ SAP CRM Java vulnerability CVE-2018-2380 - Exploit tested: https://www.exploit-db.com/exploits/44292 ]
#
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-941-APPLICATION-ATTACK-XSS.conf: the following works:
#    <script src="//ha.ckers.org/.j">
#
# This rule is also triggered by the following exploit(s):
# [ SAP CRM Java vulnerability CVE-2018-2380 - Exploit tested: https://www.exploit-db.com/exploits/44292 ]
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 941181 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941320,phase:2,block,capture,t:none,t:jsDecode,t:lowercase,msg:'Possible XSS Attack Detected - HTML Tag Handler',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/2',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242/63',tag:'PCI/6.5.1',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"
[2025-06-14 09:25:31 UTC] Parsed SecRule 941320 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-941-APPLICATION-ATTACK-XSS.conf: SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* "@rx (?i:[\"'][ ]*(?:[^a-z0-9~_:' ]|in).*?(?:(?:l|\x5cu006C)(?:o|\x5cu006F)(?:c|\x5cu00
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-941-APPLICATION-ATTACK-XSS.conf: SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* "@rx (?i)[\"\'][ ]*(?:[^a-z0-9~_:\' ]|in).+?[.].+?=" "id:941340,phase:2,block,capture,t
[2025-06-14 09:25:31 UTC] Parsing directive: id:941380,phase:2,block,capture,t:none,msg:'AngularJS client side template injection detected',logdata:'Matched Data: Suspicious payload found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'attack-xss',tag:'xss-perf-disable',tag:'paranoia-level/2',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-XSS',tag:'capec/1000/152/242/63',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.xss_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"
[2025-06-14 09:25:31 UTC] Parsed SecRule 941380 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941015,phase:1,pass,nolog,tag:'OWASP_CRS',ver:'OWASP_CRS/4.16.0-dev',skipAfter:END-REQUEST-941-APPLICATION-ATTACK-XSS"
[2025-06-14 09:25:31 UTC] Parsed SecRule 941015 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941016,phase:2,pass,nolog,tag:'OWASP_CRS',ver:'OWASP_CRS/4.16.0-dev',skipAfter:END-REQUEST-941-APPLICATION-ATTACK-XSS"
#
# -= Paranoia Level 3 =- (apply only when tx.detection_paranoia_level is sufficiently high: 3 or higher)
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 941016 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941017,phase:1,pass,nolog,tag:'OWASP_CRS',ver:'OWASP_CRS/4.16.0-dev',skipAfter:END-REQUEST-941-APPLICATION-ATTACK-XSS"
[2025-06-14 09:25:31 UTC] Parsed SecRule 941017 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:941018,phase:2,pass,nolog,tag:'OWASP_CRS',ver:'OWASP_CRS/4.16.0-dev',skipAfter:END-REQUEST-941-APPLICATION-ATTACK-XSS"
#
# -= Paranoia Level 4 =- (apply only when tx.detection_paranoia_level is sufficiently high: 4 or higher)
#



#
# -= Paranoia Levels Finished =-
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 941018 in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Parsed SecMarker END-REQUEST-941-APPLICATION-ATTACK-XSS in REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Processing 37 rules for REQUEST-941-APPLICATION-ATTACK-XSS.conf
[2025-06-14 09:25:31 UTC] Inserting rule 941011
[2025-06-14 09:25:31 UTC] Inserting rule 941012
[2025-06-14 09:25:31 UTC] Inserting rule 941010
[2025-06-14 09:25:31 UTC] Inserting rule 941100
[2025-06-14 09:25:31 UTC] Inserting rule 941110
[2025-06-14 09:25:31 UTC] Inserting rule 941130
[2025-06-14 09:25:31 UTC] Inserting rule 941140
[2025-06-14 09:25:31 UTC] Inserting rule 941180
[2025-06-14 09:25:31 UTC] Inserting rule 941190
[2025-06-14 09:25:31 UTC] Inserting rule 941200
[2025-06-14 09:25:31 UTC] Inserting rule 941210
[2025-06-14 09:25:31 UTC] Inserting rule 941220
[2025-06-14 09:25:31 UTC] Inserting rule 941230
[2025-06-14 09:25:31 UTC] Inserting rule 941240
[2025-06-14 09:25:31 UTC] Inserting rule 941260
[2025-06-14 09:25:31 UTC] Inserting rule 941270
[2025-06-14 09:25:31 UTC] Inserting rule 941280
[2025-06-14 09:25:31 UTC] Inserting rule 941290
[2025-06-14 09:25:31 UTC] Inserting rule 941300
[2025-06-14 09:25:31 UTC] Inserting rule 941310
[2025-06-14 09:25:31 UTC] Inserting rule 941350
[2025-06-14 09:25:31 UTC] Inserting rule 941360
[2025-06-14 09:25:31 UTC] Inserting rule 941370
[2025-06-14 09:25:31 UTC] Inserting rule 941390
[2025-06-14 09:25:31 UTC] Inserting rule 941400
[2025-06-14 09:25:31 UTC] Inserting rule 941013
[2025-06-14 09:25:31 UTC] Inserting rule 941014
[2025-06-14 09:25:31 UTC] Inserting rule 941101
[2025-06-14 09:25:31 UTC] Inserting rule 941150
[2025-06-14 09:25:31 UTC] Inserting rule 941181
[2025-06-14 09:25:31 UTC] Inserting rule 941320
[2025-06-14 09:25:31 UTC] Inserting rule 941380
[2025-06-14 09:25:31 UTC] Inserting rule 941015
[2025-06-14 09:25:31 UTC] Inserting rule 941016
[2025-06-14 09:25:31 UTC] Inserting rule 941017
[2025-06-14 09:25:31 UTC] Inserting rule 941018
[2025-06-14 09:25:31 UTC] Inserting rule END-REQUEST-941-APPLICATION-ATTACK-XSS
[2025-06-14 09:25:31 UTC] Inserted rule 941011
[2025-06-14 09:25:31 UTC] Inserted rule 941012
[2025-06-14 09:25:31 UTC] Inserted rule 941010
[2025-06-14 09:25:31 UTC] Inserted rule 941100
[2025-06-14 09:25:31 UTC] Inserted rule 941110
[2025-06-14 09:25:31 UTC] Inserted rule 941130
[2025-06-14 09:25:31 UTC] Inserted rule 941140
[2025-06-14 09:25:31 UTC] Inserted rule 941180
[2025-06-14 09:25:31 UTC] Inserted rule 941190
[2025-06-14 09:25:31 UTC] Inserted rule 941200
[2025-06-14 09:25:31 UTC] Inserted rule 941210
[2025-06-14 09:25:31 UTC] Inserted rule 941220
[2025-06-14 09:25:31 UTC] Inserted rule 941230
[2025-06-14 09:25:31 UTC] Inserted rule 941240
[2025-06-14 09:25:31 UTC] Inserted rule 941260
[2025-06-14 09:25:31 UTC] Inserted rule 941270
[2025-06-14 09:25:31 UTC] Inserted rule 941280
[2025-06-14 09:25:31 UTC] Inserted rule 941290
[2025-06-14 09:25:31 UTC] Inserted rule 941300
[2025-06-14 09:25:31 UTC] Inserted rule 941310
[2025-06-14 09:25:31 UTC] Inserted rule 941350
[2025-06-14 09:25:31 UTC] Inserted rule 941360
[2025-06-14 09:25:31 UTC] Inserted rule 941370
[2025-06-14 09:25:31 UTC] Inserted rule 941390
[2025-06-14 09:25:31 UTC] Inserted rule 941400
[2025-06-14 09:25:31 UTC] Inserted rule 941013
[2025-06-14 09:25:31 UTC] Inserted rule 941014
[2025-06-14 09:25:31 UTC] Inserted rule 941101
[2025-06-14 09:25:31 UTC] Inserted rule 941150
[2025-06-14 09:25:31 UTC] Inserted rule 941181
[2025-06-14 09:25:31 UTC] Inserted rule 941320
[2025-06-14 09:25:31 UTC] Inserted rule 941380
[2025-06-14 09:25:31 UTC] Inserted rule 941015
[2025-06-14 09:25:31 UTC] Inserted rule 941016
[2025-06-14 09:25:31 UTC] Inserted rule 941017
[2025-06-14 09:25:31 UTC] Inserted rule 941018
[2025-06-14 09:25:31 UTC] Inserted rule END-REQUEST-941-APPLICATION-ATTACK-XSS
[2025-06-14 09:25:31 UTC] Fetching https://raw.githubusercontent.com/teckglobal/teckglobal-bfp-waf-rules/main/rules/REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing REQUEST-942-APPLICATION-ATTACK-SQLI.conf, content length: 97489
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: # ------------------------------------------------------------------------
# OWASP CRS ver.4.16.0-dev
# Copyright (c) 2006-2020 Trustwave and contributors. All rights reserved.
# Copyright (c) 2021-20
[2025-06-14 09:25:31 UTC] Parsing directive: id:942011,phase:1,pass,nolog,tag:'OWASP_CRS',ver:'OWASP_CRS/4.16.0-dev',skipAfter:END-REQUEST-942-APPLICATION-ATTACK-SQLI"
[2025-06-14 09:25:31 UTC] Parsed SecRule 942011 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942012,phase:2,pass,nolog,tag:'OWASP_CRS',ver:'OWASP_CRS/4.16.0-dev',skipAfter:END-REQUEST-942-APPLICATION-ATTACK-SQLI"
#
# -= Paranoia Level 1 (default) =- (apply only when tx.detection_paranoia_level is sufficiently high: 1 or higher)
#

#
# References:
#
# SQL Injection Knowledgebase (via @LightOS) -
# http://websec.ca/kb/sql_injection
#
# SQLi Filter Evasion Cheat Sheet -
# http://websec.wordpress.com/2010/12/04/sqli-filter-evasion-cheat-sheet-mysql/
#
# SQL Injection Cheat Sheet -
# http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/
#
# SQLMap's Tamper Scripts (for evasions)
# https://github.com/sqlmapproject/sqlmap
#

#
# -=[ LibInjection Check ]=-
#
# There is a stricter sibling of this rule at 942101. It covers REQUEST_BASENAME and REQUEST_FILENAME.
#
# Ref: https://github.com/libinjection/libinjection
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942012 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942100,phase:2,block,capture,t:none,t:utf8toUnicode,t:urlDecodeUni,t:removeNulls,msg:'SQL Injection Attack Detected via libinjection',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',multiMatch,setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}'"


#
# -=[ Detect DB Names ]=-
#
# Regular expression generated from regex-assembly/942140.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942140
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942100 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942140,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'SQL Injection Attack: Common DB Names Detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"


#
# -=[ SQL Function Names ]=-
#
# This rule has a stricter sibling to this rule (942152) that checks for SQL function names in
# request headers referer and user-agent.
#
# Regular expression generated from regex-assembly/942151.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942151
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942140 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942151,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'SQL Injection Attack: SQL function name detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"


#
# -=[ PHPIDS - Converted SQLI Filters ]=-
#
# https://raw.githubusercontent.com/PHPIDS/PHPIDS/master/lib/IDS/default_filter.xml
#
# The rule 942160 prevents time-based blind SQL injection attempts
# by prohibiting sleep() or benchmark(
[2025-06-14 09:25:31 UTC] Parsing directive: ) functions:
#
# * The sleep command takes a number of seconds as an argument.
# * The benchmark command executes the specified expression multiple times.
#
# Using a long sleep time or high number of executions
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: ) functions:
#
# * The sleep command takes a number of seconds as an argument.
# * The benchmark command executes the specified expression multiple times.
#
# Using a long sleep time or high number of executions
[2025-06-14 09:25:31 UTC] Parsing directive: you can create a delay
# with the response from the server.  This allows to determine whether the
# query has been executed or not.  A high response time proves that the SQLi
# worked successfully. It can now be equipped with the real payload.
#
# Therefore this rule does not prevent the attack itself
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: you can create a delay
# with the response from the server.  This allows to determine whether the
# query has been executed or not.  A high response time proves that the SQLi
# worked successfully. It can now be equipped with the real payload.
#
# Therefore this rule does not prevent the attack itself
[2025-06-14 09:25:31 UTC] Parsing directive: but blocks an
# attacker from using the standard utils to tinker with blind SQLi.
#
# A positive side effect is that it prevents certain DoS attacks via the directives
# described above.
#
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: but blocks an
# attacker from using the standard utils to tinker with blind SQLi.
#
# A positive side effect is that it prevents certain DoS attacks via the directives
# described above.
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942151 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942160,phase:2,block,capture,t:none,t:urlDecodeUni,t:replaceComments,msg:'Detects blind sqli tests using sleep() or benchmark()',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# Regular expression generated from regex-assembly/942170.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942170
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942160 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942170,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'Detects SQL benchmark and sleep injection attempts including conditional queries',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# Regular expression generated from regex-assembly/942190.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942190
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942170 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)[\"'`](?:[\s\x0b]*![\s\x0b]*[\"'0-9A-Z_-z]|;?[\s\x0b]*(?:having|select|union\b[\s\x0b]*(?:all|(?:distin|sele)ct))\b[\s\x0b
[2025-06-14 09:25:31 UTC] Parsing directive: id:942220,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'Looking for integer overflow attacks, these are taken from skipfish, except 2.2.2250738585072011e-308 is the \"magic number\" crash',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# Regular expression generated from regex-assembly/942230.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942230
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942220 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942230,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'Detects conditional SQL injection attempts',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# Regular expression generated from regex-assembly/942240.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942240
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942230 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)alter[\s\x0b]*?[0-9A-Z_a-z]+.*?char(?:acter)?[\s\x0b]+set[\s\x0b]+[0-9A-Z_a-z]+|[\"'`](?:;*?[\s\x0b]*?waitfor[\s\x0b]+(?:t
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i:merge.*?using\s*?\(|execute\s*?immediate\s*?[\"'`]|match\s*?[\w(),+-]+\s*?against\s*?\()" "id:942250,phase:2,block,capture
[2025-06-14 09:25:31 UTC] Parsing directive: id:942270,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'Looking for basic sql injection. Common attack string for mysql, oracle and others',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# Regular expression generated from regex-assembly/942280.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942280
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942270 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/* "@rx (?i)select[\s\x0b]*?pg_sleep|waitfor[\s\x0b]*?delay[\s\x0b]?[\"'`]+[\s\x0b]
[2025-06-14 09:25:31 UTC] Parsing directive: id:942290,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'Finds basic MongoDB SQL injection attempts',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# This rule has a stricter sibling (942321) that checks for MySQL and PostgreSQL procedures / functions in
# request headers referer and user-agent.
#
# Regular expression generated from regex-assembly/942320.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942320
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942290 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942320,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'Detects MySQL and PostgreSQL stored procedure/function injections',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# Regular expression generated from regex-assembly/942350.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942350
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942320 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942350,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'Detects MySQL UDF injection and other data/structure manipulation attempts',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# This rule has two stricter sibling: 942361 and 942362.
# The keywords 'alter' and 'union' led to false positives.
# Therefore they have been moved to PL2 and the keywords have been extended on PL1.
# The original version also had loose word boundaries and context checksum cause further false positives.
# Because fixing those introduced bypass
[2025-06-14 09:25:31 UTC] Parsing directive: the original variant was moved to PL2 as 942362.
#
# Sources for SQL ALTER statements:
# MySQL: https://dev.mysql.com/doc/refman/5.7/en/sql-syntax-data-definition.html
# Oracle/PLSQL: https://docs.oracle.com/search/?q=alter&size=60&category=database
# PostgreQSL: https://www.postgresql.org/search/?u=%2Fdocs&q=alter
# MSSQL: https://learn.microsoft.com/en-us/sql/t-sql/statements/statements?view=sql-server-ver16
# DB2: https://www.ibm.com/docs/en/search/alter?scope=SSEPGG_9.5.0
#
# Regular expression generated from regex-assembly/942360.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942360
#
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: the original variant was moved to PL2 as 942362.
#
# Sources for SQL ALTER statements:
# MySQL: https://dev.mysql.com/doc/refman/5.7/en/sql-syntax-data-definition.html
# Oracle/PLSQL: https://docs.oracle.com/search/?q=alter&size=60&category=database
# PostgreQSL: https://www.postgresql.org/search/?u=%2Fdocs&q=alter
# MSSQL: https://learn.microsoft.com/en-us/sql/t-sql/statements/statements?view=sql-server-ver16
# DB2: https://www.ibm.com/docs/en/search/alter?scope=SSEPGG_9.5.0
#
# Regular expression generated from regex-assembly/942360.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942360
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942350 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)\b(?:(?:alter|(?:(?:cre|trunc|upd)at|renam)e|de(?:lete|sc)|(?:inser|selec)t|load)[\s\x0b]+(?:char|group_concat|load_file)\
[2025-06-14 09:25:31 UTC] Parsing directive: id:942500,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'MySQL in-line comment detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',multiMatch,setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"


# This rule catches an authentication bypass via SQL injection that abuses semi-colons to end the SQL query early.
# Any characters after the semi-colon are ignored by some DBMSes (e.g. SQLite).
#
# An example of this would be:
#   email=admin%40juice-sh.op';&password=foo
#
# The server then turns this into:
#   SELECT * FROM users WHERE email='admin@juice-sh.op';' AND password='foo'
#
# Regular expression generated from regex-assembly/942540.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942540
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942500 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx ^(?:[^']*'|[^\"]*\"|[^`]*`)[\s\x0b]*;" "id:942540,phase:2,block,capture,t:none,t:urlDecodeUni,t:replaceComments,msg:'SQL Authe
[2025-06-14 09:25:31 UTC] Parsing directive: id:942560,phase:2,block,t:none,t:urlDecodeUni,t:replaceComments,msg:'MySQL Scientific Notation payload detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/1',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"


# This rule tries to match JSON SQL syntax that could be used as a bypass technique.
# Referring to this research: https://claroty.com/team82/research/js-on-security-off-abusing-json-based-sql-to-bypass-waf
#
# Regular expression generated from regex-assembly/942550.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942550
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942560 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_FILENAME|REQUEST_COOKIES|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx [\"'`][\[\{].*[\]\}][\"'`].*(::.*jsonb?)?.*(?:(?:@|->?)>|<@|\?[&\|]?|#>>?|[<>]|<-)|(?:(?:@|->?)>|<@|\?[&\|]?|
[2025-06-14 09:25:31 UTC] Parsing directive: id:942013,phase:1,pass,nolog,tag:'OWASP_CRS',ver:'OWASP_CRS/4.16.0-dev',skipAfter:END-REQUEST-942-APPLICATION-ATTACK-SQLI"
[2025-06-14 09:25:31 UTC] Parsed SecRule 942013 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942014,phase:2,pass,nolog,tag:'OWASP_CRS',ver:'OWASP_CRS/4.16.0-dev',skipAfter:END-REQUEST-942-APPLICATION-ATTACK-SQLI"
#
# -= Paranoia Level 2 =- (apply only when tx.detection_paranoia_level is sufficiently high: 2 or higher)
#


#
# -=[ SQL Operators ]=-
#
# This rule is also triggered by the following exploit(s):
# [ SAP CRM Java vulnerability CVE-2018-2380 - Exploit tested: https://www.exploit-db.com/exploits/44292 ]
#
# Regular expression generated from regex-assembly/942120.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942120
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942014 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule ARGS_NAMES|ARGS|REQUEST_FILENAME|XML:/* "@rx (?i)[!=]=|&&|\|\||->|>[=>]|<(?:[<=]|>(?:[\s\x0b]+binary)?)|\b(?:(?:xor|r(?:egexp|like)|i(?:snull|like)|notnull)\b|collate(?:[^0-9A-Z_a-z]*?(?:U&)?[
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule ARGS_NAMES|ARGS|XML:/* "@rx (?i)[\s\x0b\"'-\)`]*?\b([0-9A-Z_a-z]+)\b[\s\x0b\"'-\)`]*?(?:=|<=>|(?:sounds[\s\x0b]+)?like|glob|r(?:like|egexp))[\s\x0b\"'-\)`]*?\b([0-9A-Z_a-z]+)\b" "id:942130,pha
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule ARGS_NAMES|ARGS|XML:/* "@rx (?i)[\s\x0b\"'-\)`]*?\b([0-9A-Z_a-z]+)\b[\s\x0b\"'-\)`]*?(?:![<->]|<[=>]?|>=?|\^|is[\s\x0b]+not|not[\s\x0b]+(?:like|r(?:like|egexp)))[\s\x0b\"'-\)`]*?\b([0-9A-Z_a-z
[2025-06-14 09:25:31 UTC] Parsing directive: id:942150,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'SQL Injection Attack: SQL function name detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/2',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

#
# -=[ SQL Authentication Bypasses ]=-
#
# Authentication bypass occurs when the attacker can log in as another user
# without knowing the user's password. The example bypass could look like this:
#
# x' OR 'x
#
# Because of the quantity of different rules they are split into:
# - 942540 PL1
# - 942180 PL2
# - 942260 PL2
# - 942340 PL2
# - 942520 PL2
#   - 942521 PL2
#   - 942522 PL2

# Regular expression generated from regex-assembly/942180.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942180
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942150 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:/\*)+[\"'`]+[\s\x0b]?(?:--|[#\{]|/\*)?|[\"'`](?:[\s\x0b]*(?:(?:x?or|and|div|like|between)[\s\x0b\-0-9A-Z_a-z]+[\(\)\+-\
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/* "@rx (?i),.*?[\"'\)0-9`-f][\"'`](?:[\"'`].*?[\"'`]|(?:\r?\n)?\z|[^\"'`]+)|[^0-9A
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:&&|\|\||and|between|div|like|n(?:and|ot)|(?:xx?)?or)[\s\x0b\(]+[0-9A-Z_a-z]+[\s\x0b\)]*?[!\+=]+[\s\x0b0-9]*?[\"'-\)=`]|
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)[\"'`][\s\x0b]*?(?:(?:and|n(?:and|ot)|(?:xx?)?or|div|like|between|\|\||&&)[\s\x0b]+[\s\x0b0-9A-Z_a-z]+=[\s\x0b]*?[0-9A-Z_a
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)\)[\s\x0b]*?when[\s\x0b]*?[0-9]+[\s\x0b]*?then|[\"'`][\s\x0b]*?(?:[#\{]|--)|/\*![\s\x0b]?[0-9]+|\b(?:(?:binary|cha?r)[\s\x
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:\([\s\x0b]*?select[\s\x0b]*?[0-9A-Z_a-z]+|coalesce|order[\s\x0b]+by[\s\x0b]+if[0-9A-Z_a-z]*?)[\s\x0b]*?\(|\*/from|\+[\s
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)[\"'`][\s\x0b]*?\b(?:x?or|div|like|between|and)\b[\s\x0b]*?[\"'`]?[0-9]|\x5cx(?:2[37]|3d)|^(?:.?[\"'`]$|[\"'\x5c`]*?(?:[\"
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)in[\s\x0b]*?\(+[\s\x0b]*?select|(?:(?:N?AND|X?X?OR|DIV|LIKE|BETWEEN|NOT)[\s\x0b]+|(?:\|\||&&)[\s\x0b]*)[\s\x0b\+0-9A-Z_a-z
[2025-06-14 09:25:31 UTC] Parsing directive: id:942361,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'Detects basic SQL injection based on keyword alter or union',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/2',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

# This rule is a stricter sibling of 942360.
# The loose word boundaries and light context led to false positives.
# Because the stricter variant does miss quite a few legitimate payloads
[2025-06-14 09:25:31 UTC] Parsing directive: the loose version was moved to PL2.
#
# Regular expression generated from regex-assembly/942362.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942362
#
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: the loose version was moved to PL2.
#
# Regular expression generated from regex-assembly/942362.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942362
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942361 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)(?:alter|(?:(?:cre|trunc|upd)at|renam)e|de(?:lete|sc)|(?:inser|selec)t|load)[\s\x0b]+(?:char|group_concat|load_file)[\s\x0
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:Referer|REQUEST_HEADERS:User-Agent|ARGS_NAMES|ARGS|XML:/* "@rx (?i)[\"'`](?:[\s\x0b]*?(?:(?:\*.+(?:x?or|div|like|between|(?:an|i)d)[^0-9A-
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)\b(?:having\b(?:[\s\x0b]+(?:[0-9]{1,10}|'[^=]{1,10}')[\s\x0b]*?[<->]| ?(?:[0-9]{1,10} ?[<->]+|[
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)\b(?:or\b(?:[\s\x0b]?(?:[0-9]{1,10}|[\"'][^=]{1,10}[\"'])[\s\x0b]?[<->]+|[\s\x0b]+(?:[0-9]{1,10
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)\band\b(?:[\s\x0b]+(?:[0-9]{1,10}[\s\x0b]*?[<->]|'[^=]{1,10}')| ?(?:[0-9]{1,10}|[\"'][^=]{1,10}
[2025-06-14 09:25:31 UTC] Parsing directive: id:942410,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'SQL Injection Attack',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/2',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"


# The former rule id 942410 was split into three new rules: 942410
[2025-06-14 09:25:31 UTC] Parsing directive: 942470
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: 942470
[2025-06-14 09:25:31 UTC] Parsing directive: 942480
#
# Regular expression generated from regex-assembly/942470.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942470
#
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: 942480
#
# Regular expression generated from regex-assembly/942470.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942470
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942410 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942470,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'SQL Injection Attack',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/2',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"


# The former rule id 942410 was split into three new rules: 942410
[2025-06-14 09:25:31 UTC] Parsing directive: 942470
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: 942470
[2025-06-14 09:25:31 UTC] Parsing directive: 942480
#
# Regular expression generated from regex-assembly/942480.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942480
#
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: 942480
#
# Regular expression generated from regex-assembly/942480.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942480
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942470 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942480,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'SQL Injection Attack',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/2',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"


#
# [ SQL Injection Character Anomaly Usage ]
#
# This rule is also triggered by the following exploit(s):
# [ SAP CRM Java vulnerability CVE-2018-2380 - Exploit tested: https://www.exploit-db.com/exploits/44292 ]
#
# This rules attempts to gauge when there is an excessive use of
# meta-characters within a single parameter payload.
#
# Expect a lot of false positives with this rule.
# The most likely false positive instances will be free-form text fields.
# This will make it necessary to disable the rule for certain known parameters.
# The following directive is an example to switch off the rule globally for
# the parameter foo. Place this instruction in your configuration after
# the include directive for the Core Rules Set.
#
# SecRuleUpdateTargetById 942430 "!ARGS:foo"
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942480 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule ARGS_NAMES|ARGS|XML:/* "@rx ((?:[~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>][^~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>]*?){12})" "id:942430,phase:2,block,capture,t:none,t:urlDecode
[2025-06-14 09:25:31 UTC] Parsing directive: id:942441,phase:2,pass,t:none,nolog,tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',ctl:ruleRemoveTargetById=942440;ARGS:fbclid,ver:'OWASP_CRS/4.16.0-dev'"

#
# -=[ Exclusion rule for 942440 ]=-
#
# Prevent FPs against Google click identifier
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942441 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942442
[2025-06-14 09:25:31 UTC] Parsing directive: phase:2
[2025-06-14 09:25:31 UTC] Parsing directive: pass
[2025-06-14 09:25:31 UTC] Parsing directive: t:none
[2025-06-14 09:25:31 UTC] Parsing directive: nolog
[2025-06-14 09:25:31 UTC] Parsing directive: tag:'OWASP_CRS'
[2025-06-14 09:25:31 UTC] Parsing directive: tag:'OWASP_CRS/ATTACK-SQLI'
[2025-06-14 09:25:31 UTC] Parsing directive: ctl:ruleRemoveTargetById=942440;ARGS:gclid
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: ctl:ruleRemoveTargetById=942440;ARGS:gclid
[2025-06-14 09:25:31 UTC] Parsing directive: ver:'OWASP_CRS/4.16.0-dev'"

#
# -=[ Detect SQL Comment Sequences ]=-
#
# Example Payloads Detected:
# -------------------------
# OR 1#
# DROP sampletable;--
# admin'--
# DROP/*comment*/sampletable
# DR/**/OP/*bypass deny listing*/sampletable
# SELECT/*avoid-spaces*/password/**/FROM/**/Members
# SELECT /*!32302 1/0, */ 1 FROM tablename
# ‘ or 1=1#
# ‘ or 1=1-- -
# ‘ or 1=1/*
# ' or 1=1;\x00
# 1='1' or-- -
# ' /*!50000or*/1='1
# ' /*!or*/1='1
# 0/**/union/*!50000select*/table_name`foo`/**/
# -------------------------
#
# The chained rule is designed to prevent false positives by specifically
# targeting JWT tokens. Starting with 'ey' targets JWT tokens, where the 'ey'
# prefix corresponds to the beginning of the Base64-encoded header section.
#
# example:
# $ echo '{"' | base64
# eyIK
#
# Regular expressions generated from regex-assembly/942440.ra and regex-assembly/942440-chain1.ra.
# To update the regular expressions run the following shell scripts
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942440
#   crs-toolchain regex update 942440-chain1
#
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: ver:'OWASP_CRS/4.16.0-dev'"

#
# -=[ Detect SQL Comment Sequences ]=-
#
# Example Payloads Detected:
# -------------------------
# OR 1#
# DROP sampletable;--
# admin'--
# DROP/*comment*/sampletable
# DR/**/OP/*bypass deny listing*/sampletable
# SELECT/*avoid-spaces*/password/**/FROM/**/Members
# SELECT /*!32302 1/0, */ 1 FROM tablename
# ‘ or 1=1#
# ‘ or 1=1-- -
# ‘ or 1=1/*
# ' or 1=1;\x00
# 1='1' or-- -
# ' /*!50000or*/1='1
# ' /*!or*/1='1
# 0/**/union/*!50000select*/table_name`foo`/**/
# -------------------------
#
# The chained rule is designed to prevent false positives by specifically
# targeting JWT tokens. Starting with 'ey' targets JWT tokens, where the 'ey'
# prefix corresponds to the beginning of the Base64-encoded header section.
#
# example:
# $ echo '{"' | base64
# eyIK
#
# Regular expressions generated from regex-assembly/942440.ra and regex-assembly/942440-chain1.ra.
# To update the regular expressions run the following shell scripts
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942440
#   crs-toolchain regex update 942440-chain1
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942442 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942440,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'SQL Comment Sequence Detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/2',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',chain"
    SecRule MATCHED_VARS "!@rx ^ey[\-0-9A-Z_a-z]+\.ey[\-0-9A-Z_a-z]+\.[\-0-9A-Z_a-z]+$" "t:none,setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}'"


#
# -=[ SQL Hex Evasion Methods ]=-
#
# Hex encoding detection:
# (?i:\b0x[a-f\d]{3
[2025-06-14 09:25:31 UTC] Parsing directive: }) will match any 3 or more hex bytes after "0x"
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: }) will match any 3 or more hex bytes after "0x"
[2025-06-14 09:25:31 UTC] Parsing directive: together forming a hexadecimal payload(e.g 0xf00
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: together forming a hexadecimal payload(e.g 0xf00
[2025-06-14 09:25:31 UTC] Parsing directive: 0xf00d and so on)
#
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: 0xf00d and so on)
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942440 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942450,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'SQL Hex Encoding Identified',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/2',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"


#
# -=[ Detect SQLi bypass: backticks ]=-
#
# Quotes and backticks can be used to bypass SQLi detection.
#
# Example:
# GET http://localhost/test.php?id=9999%20or+{`if`(2=(select+2+from+wp_users+where+user_login='admin'))}
#
# The minimum text between the ticks or backticks must be 2 (if
[2025-06-14 09:25:31 UTC] Parsing directive: for example) and a maximum of 29.
# 29 is a compromise: The lower this number (29)
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: for example) and a maximum of 29.
# 29 is a compromise: The lower this number (29)
[2025-06-14 09:25:31 UTC] Parsing directive: the lower the probability of FP and the higher the probability of false negatives.
# In tests we got a minimum number of FP with {2
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: the lower the probability of FP and the higher the probability of false negatives.
# In tests we got a minimum number of FP with {2
[2025-06-14 09:25:31 UTC] Parsing directive: 29}.
#
# Base64 encoding detection:
# (?:[A-Za-z0-9+/]{4})+ #match any number of 4-letter blocks of the base64 char set
# (?:[A-Za-z0-9+/]{2}== #match 2-letter block of the base64 char set followed by "=="
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: 29}.
#
# Base64 encoding detection:
# (?:[A-Za-z0-9+/]{4})+ #match any number of 4-letter blocks of the base64 char set
# (?:[A-Za-z0-9+/]{2}== #match 2-letter block of the base64 char set followed by "=="
[2025-06-14 09:25:31 UTC] Parsing directive: together forming a 4-letter block
# |                     # or
# [A-Za-z0-9+/]{3}=     #match 3-letter block of the base64 char set followed by "="
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: together forming a 4-letter block
# |                     # or
# [A-Za-z0-9+/]{3}=     #match 3-letter block of the base64 char set followed by "="
[2025-06-14 09:25:31 UTC] Parsing directive: together forming a 4-letter block
# )?
#
# The minimal string that triggers this regexp is: `if`
#
# The rule 942511 is similar to this rule
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: together forming a 4-letter block
# )?
#
# The minimal string that triggers this regexp is: `if`
#
# The rule 942511 is similar to this rule
[2025-06-14 09:25:31 UTC] Parsing directive: but triggers on normal quotes
# ('if'). That rule runs in paranoia level 3 or higher since it is prone to
# false positives in natural text.
#
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: but triggers on normal quotes
# ('if'). That rule runs in paranoia level 3 or higher since it is prone to
# false positives in natural text.
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942450 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942510,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'SQLi bypass attempt by ticks or backticks detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/2',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"


# Regular expression generated from regex-assembly/942520.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942520
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942510 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx (?i)[\"'`][\s\x0b]*?(?:(?:is[\s\x0b]+not|not[\s\x0b]+(?:like|glob|(?:betwee|i)n|null|regexp|match)|mod|div|sounds[\s\x0b]+like
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/* "@rx (?i)^(?:[^']*?(?:'[^']*?'[^']*?)*?'|[^\"]*?(?:\"[^\"]*?\"[^\"]*?)*?\"|[^`]*?(?:`[^`]*?`[^`]*?)*?`)[\s\x0b]*([0-9A
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule ARGS_NAMES|ARGS|XML:/* "@rx ^.*?\x5c['\"`](?:.*?['\"`])?\s*(?:and|or)\b" "id:942522,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'Detects basic SQL authentication bypass attempts 4.1/4',log
[2025-06-14 09:25:31 UTC] Parsing directive: id:942101,phase:1,block,capture,t:none,t:utf8toUnicode,t:urlDecodeUni,t:removeNulls,msg:'SQL Injection Attack Detected via libinjection',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/2',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

#
# -=[ SQL Function Names ]=-
#
# This rule is a stricter sibling of 942151.
# This rule 942152 checks for the same regex in request headers referer and user-agent.
#
# Regular expression generated from regex-assembly/942152.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942152
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942101 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942152,phase:1,block,capture,t:none,t:urlDecodeUni,msg:'SQL Injection Attack: SQL function name detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/2',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

#
# This rule is a stricter sibling of 942320.
# It checks for the same regex in request headers referer and user-agent.
#
# Regular expression generated from regex-assembly/942321.ra.
# To update the regular expression run the following shell script
# (consult https://coreruleset.org/docs/development/regex_assembly/ for details):
#   crs-toolchain regex update 942321
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942152 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942321,phase:1,block,capture,t:none,t:urlDecodeUni,msg:'Detects MySQL and PostgreSQL stored procedure/function injections',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/2',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"
[2025-06-14 09:25:31 UTC] Parsed SecRule 942321 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942015,phase:1,pass,nolog,tag:'OWASP_CRS',ver:'OWASP_CRS/4.16.0-dev',skipAfter:END-REQUEST-942-APPLICATION-ATTACK-SQLI"
[2025-06-14 09:25:31 UTC] Parsed SecRule 942015 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942016,phase:2,pass,nolog,tag:'OWASP_CRS',ver:'OWASP_CRS/4.16.0-dev',skipAfter:END-REQUEST-942-APPLICATION-ATTACK-SQLI"
#
# -= Paranoia Level 3 =- (apply only when tx.detection_paranoia_level is sufficiently high: 3 or higher)
#


#
# [ SQL HAVING queries ]
#
# This pattern was split off from rule 942250 due to frequent
# false positives in English text. Testing showed that SQL
# injections with HAVING should be detected by libinjection
# (rule 942100).
#
# This is a stricter sibling of rule 942250.
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942016 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942251,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'Detects HAVING injections',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/3',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl3=+%{tx.critical_anomaly_score}'"

# This rule is a stricter sibling of 942330. See that rule for a
# description and overview.
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942251 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* "@rx [\"'`][\s\d]*?[^\w\s]\W*?\d\W*?.*?[\"'`\d]" "id:942490,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'Detects classic SQL in
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES "@rx ((?:[~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>][^~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>]*?){8})" "id:942420
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule ARGS_NAMES|ARGS|XML:/* "@rx ((?:[~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>][^~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>]*?){6})" "id:942431,phase:2,block,capture,t:none,t:urlDecodeU
[2025-06-14 09:25:31 UTC] Parsing directive: id:942460,phase:2,block,capture,t:none,msg:'Meta-Character Anomaly Detection Alert - Repetitive Non-Word Characters',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/3',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'WARNING',setvar:'tx.sql_injection_score=+%{tx.warning_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl3=+%{tx.warning_anomaly_score}'"


#
# -=[ Detect SQLi bypass: quotes ]=-
#
# Quotes and backticks can be used to bypass SQLi detection.
#
# Example:
# GET http://localhost/test.php?id=9999%20or+{`if`(2=(select+2+from+wp_users+where+user_login='admin'))}
#
# The minimum text between the ticks or backticks must be 2 (if
[2025-06-14 09:25:31 UTC] Parsing directive: for example) and a maximum of 29.
# 29 is a compromise: The lower this number (29)
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: for example) and a maximum of 29.
# 29 is a compromise: The lower this number (29)
[2025-06-14 09:25:31 UTC] Parsing directive: the lower the probability of FP and the higher the probability of false negatives.
# In tests we got a minimum number of FP with {2
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: the lower the probability of FP and the higher the probability of false negatives.
# In tests we got a minimum number of FP with {2
[2025-06-14 09:25:31 UTC] Parsing directive: 29}.
#
# Base64 encoding detection:
# (?:[A-Za-z0-9+/]{4})+ #match any number of 4-letter blocks of the base64 char set
# (?:[A-Za-z0-9+/]{2}== #match 2-letter block of the base64 char set followed by "=="
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: 29}.
#
# Base64 encoding detection:
# (?:[A-Za-z0-9+/]{4})+ #match any number of 4-letter blocks of the base64 char set
# (?:[A-Za-z0-9+/]{2}== #match 2-letter block of the base64 char set followed by "=="
[2025-06-14 09:25:31 UTC] Parsing directive: together forming a 4-letter block
# |                     # or
# [A-Za-z0-9+/]{3}=     #match 3-letter block of the base64 char set followed by "="
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: together forming a 4-letter block
# |                     # or
# [A-Za-z0-9+/]{3}=     #match 3-letter block of the base64 char set followed by "="
[2025-06-14 09:25:31 UTC] Parsing directive: together forming a 4-letter block
# )?
#
# The minimal string that triggers this regexp is: 'if'
#
# The rule 942510 is similar to this rule
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: together forming a 4-letter block
# )?
#
# The minimal string that triggers this regexp is: 'if'
#
# The rule 942510 is similar to this rule
[2025-06-14 09:25:31 UTC] Parsing directive: but triggers on backticks
# (`if`). That rule runs in paranoia level 2 or higher since the risk of
# false positives in natural text is still present but lower than this
# rule.
#
[2025-06-14 09:25:31 UTC] Unhandled directive in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: but triggers on backticks
# (`if`). That rule runs in paranoia level 2 or higher since the risk of
# false positives in natural text is still present but lower than this
# rule.
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942460 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942511,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'SQLi bypass attempt by ticks detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/3',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl3=+%{tx.critical_anomaly_score}'"

# Detects ';
# ' Single quote. Used to delineate a query with an unmatched quote.
# ; Terminate a query. A prematurely terminated query creates an error.
# Explanation source:
# https://hwang.cisdept.cpp.edu/swanew/Text/SQL-Injection.htm
#
# Bug Bounty example: email=admin@juice-sh.op';&password=foo
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942511 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942530,phase:2,block,capture,t:none,t:urlDecodeUni,msg:'SQLi query termination detected',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-sqli',tag:'paranoia-level/3',tag:'OWASP_CRS',tag:'OWASP_CRS/ATTACK-SQLI',tag:'capec/1000/152/248/66',tag:'PCI/6.5.2',ver:'OWASP_CRS/4.16.0-dev',severity:'CRITICAL',setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}',setvar:'tx.inbound_anomaly_score_pl3=+%{tx.critical_anomaly_score}'"
[2025-06-14 09:25:31 UTC] Parsed SecRule 942530 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942017,phase:1,pass,nolog,tag:'OWASP_CRS',ver:'OWASP_CRS/4.16.0-dev',skipAfter:END-REQUEST-942-APPLICATION-ATTACK-SQLI"
[2025-06-14 09:25:31 UTC] Parsed SecRule 942017 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Parsing directive: id:942018,phase:2,pass,nolog,tag:'OWASP_CRS',ver:'OWASP_CRS/4.16.0-dev',skipAfter:END-REQUEST-942-APPLICATION-ATTACK-SQLI"
#
# -= Paranoia Level 4 =- (apply only when tx.detection_paranoia_level is sufficiently high: 4 or higher)
#

#
# [ SQL Injection Character Anomaly Usage ]
#
# This is a stricter sibling of rule 942420.
#
[2025-06-14 09:25:31 UTC] Parsed SecRule 942018 in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/_pk_ref/|REQUEST_COOKIES_NAMES "@rx ((?:[~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>][^~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>]*?){3})" "id:942421
[2025-06-14 09:25:31 UTC] Failed to parse block in REQUEST-942-APPLICATION-ATTACK-SQLI.conf: SecRule ARGS_NAMES|ARGS|XML:/* "@rx ((?:[~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>][^~!@#\$%\^&\*\(\)\-\+=\{\}\[\]\|:;\"'´’‘`<>]*?){2})" "id:942432,phase:2,block,capture,t:none,t:urlDecodeU
[2025-06-14 09:25:31 UTC] Parsed SecMarker END-REQUEST-942-APPLICATION-ATTACK-SQLI in REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Processing 39 rules for REQUEST-942-APPLICATION-ATTACK-SQLI.conf
[2025-06-14 09:25:31 UTC] Inserting rule 942011
[2025-06-14 09:25:31 UTC] Inserting rule 942012
[2025-06-14 09:25:31 UTC] Inserting rule 942100
[2025-06-14 09:25:31 UTC] Inserting rule 942140
[2025-06-14 09:25:31 UTC] Inserting rule 942151
[2025-06-14 09:25:31 UTC] Inserting rule 942160
[2025-06-14 09:25:31 UTC] Inserting rule 942170
[2025-06-14 09:25:31 UTC] Inserting rule 942220
[2025-06-14 09:25:31 UTC] Inserting rule 942230
[2025-06-14 09:25:31 UTC] Inserting rule 942270
[2025-06-14 09:25:31 UTC] Inserting rule 942290
[2025-06-14 09:25:31 UTC] Inserting rule 942320
[2025-06-14 09:25:31 UTC] Inserting rule 942350
[2025-06-14 09:25:31 UTC] Inserting rule 942500
[2025-06-14 09:25:31 UTC] Inserting rule 942560
[2025-06-14 09:25:31 UTC] Inserting rule 942013
[2025-06-14 09:25:31 UTC] Inserting rule 942014
[2025-06-14 09:25:31 UTC] Inserting rule 942150
[2025-06-14 09:25:31 UTC] Inserting rule 942361
[2025-06-14 09:25:31 UTC] Inserting rule 942410
[2025-06-14 09:25:31 UTC] Inserting rule 942470
[2025-06-14 09:25:31 UTC] Inserting rule 942480
[2025-06-14 09:25:31 UTC] Inserting rule 942441
[2025-06-14 09:25:31 UTC] Inserting rule 942442
[2025-06-14 09:25:31 UTC] Inserting rule 942440
[2025-06-14 09:25:31 UTC] Inserting rule 942450
[2025-06-14 09:25:31 UTC] Inserting rule 942510
[2025-06-14 09:25:31 UTC] Inserting rule 942101
[2025-06-14 09:25:31 UTC] Inserting rule 942152
[2025-06-14 09:25:31 UTC] Inserting rule 942321
[2025-06-14 09:25:31 UTC] Inserting rule 942015
[2025-06-14 09:25:31 UTC] Inserting rule 942016
[2025-06-14 09:25:31 UTC] Inserting rule 942251
[2025-06-14 09:25:31 UTC] Inserting rule 942460
[2025-06-14 09:25:31 UTC] Inserting rule 942511
[2025-06-14 09:25:31 UTC] Inserting rule 942530
[2025-06-14 09:25:31 UTC] Inserting rule 942017
[2025-06-14 09:25:31 UTC] Inserting rule 942018
[2025-06-14 09:25:31 UTC] Inserting rule END-REQUEST-942-APPLICATION-ATTACK-SQLI
[2025-06-14 09:25:31 UTC] Inserted rule 942011
[2025-06-14 09:25:31 UTC] Inserted rule 942012
[2025-06-14 09:25:31 UTC] Inserted rule 942100
[2025-06-14 09:25:31 UTC] Inserted rule 942140
[2025-06-14 09:25:31 UTC] Inserted rule 942151
[2025-06-14 09:25:31 UTC] Inserted rule 942160
[2025-06-14 09:25:31 UTC] Inserted rule 942170
[2025-06-14 09:25:31 UTC] Inserted rule 942220
[2025-06-14 09:25:31 UTC] Inserted rule 942230
[2025-06-14 09:25:31 UTC] Inserted rule 942270
[2025-06-14 09:25:31 UTC] Inserted rule 942290
[2025-06-14 09:25:31 UTC] Inserted rule 942320
[2025-06-14 09:25:31 UTC] Inserted rule 942350
[2025-06-14 09:25:31 UTC] Inserted rule 942500
[2025-06-14 09:25:31 UTC] Inserted rule 942560
[2025-06-14 09:25:31 UTC] Inserted rule 942013
[2025-06-14 09:25:31 UTC] Inserted rule 942014
[2025-06-14 09:25:31 UTC] Inserted rule 942150
[2025-06-14 09:25:31 UTC] Inserted rule 942361
[2025-06-14 09:25:31 UTC] Inserted rule 942410
[2025-06-14 09:25:31 UTC] Inserted rule 942470
[2025-06-14 09:25:31 UTC] Inserted rule 942480
[2025-06-14 09:25:31 UTC] Inserted rule 942441
[2025-06-14 09:25:31 UTC] Inserted rule 942442
[2025-06-14 09:25:31 UTC] Inserted rule 942440
[2025-06-14 09:25:31 UTC] Inserted rule 942450
[2025-06-14 09:25:31 UTC] Inserted rule 942510
[2025-06-14 09:25:31 UTC] Inserted rule 942101
[2025-06-14 09:25:31 UTC] Inserted rule 942152
[2025-06-14 09:25:31 UTC] Inserted rule 942321
[2025-06-14 09:25:31 UTC] Inserted rule 942015
[2025-06-14 09:25:31 UTC] Inserted rule 942016
[2025-06-14 09:25:31 UTC] Inserted rule 942251
[2025-06-14 09:25:31 UTC] Inserted rule 942460
[2025-06-14 09:25:31 UTC] Inserted rule 942511
[2025-06-14 09:25:31 UTC] Inserted rule 942530
[2025-06-14 09:25:31 UTC] Inserted rule 942017
[2025-06-14 09:25:31 UTC] Inserted rule 942018
[2025-06-14 09:25:31 UTC] Inserted rule END-REQUEST-942-APPLICATION-ATTACK-SQLI
[2025-06-14 09:25:31 UTC] Inserted 78 rules, skipped 0, total 78
